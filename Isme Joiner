-- Isme Joiner Script
-- Advanced Server Hopper with Premium System

local TweenService = game:GetService("TweenService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Premium Users List
local PremiumUsers = {
    ["Username1"] = true,
    ["Username2"] = true,
    ["Username3"] = true,
    -- Add more usernames here
}

-- Check if user is premium
local IsPremium = PremiumUsers[LocalPlayer.Name] or false

-- Color Schemes
local ColorSchemes = {
    FreeMium = {
        Primary = Color3.fromRGB(46, 204, 113),
        Secondary = Color3.fromRGB(39, 174, 96),
        Gradient1 = Color3.fromRGB(46, 204, 113),
        Gradient2 = Color3.fromRGB(26, 188, 156),
        Text = Color3.fromRGB(255, 255, 255)
    },
    Premium = {
        Primary = Color3.fromRGB(155, 89, 182),
        Secondary = Color3.fromRGB(142, 68, 173),
        Gradient1 = Color3.fromRGB(155, 89, 182),
        Gradient2 = Color3.fromRGB(233, 30, 99),
        Text = Color3.fromRGB(255, 255, 255)
    }
}

local CurrentScheme = IsPremium and ColorSchemes.Premium or ColorSchemes.FreeMium
local EditionText = IsPremium and "Edition: Premium" or "Edition: FreeMium"

-- Joiner State
local JoinerEnabled = false
local IsHopping = false

-- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "IsmeJoinerGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 320, 0, 400)
MainFrame.Position = UDim2.new(0.5, -160, 0.5, -200)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 16)
MainCorner.Parent = MainFrame

local MainStroke = Instance.new("UIStroke")
MainStroke.Color = CurrentScheme.Primary
MainStroke.Thickness = 2
MainStroke.Transparency = 0.5
MainStroke.Parent = MainFrame

-- Title
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, -40, 0, 50)
Title.Position = UDim2.new(0, 20, 0, 20)
Title.BackgroundTransparency = 1
Title.Text = "Isme Joiner"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 28
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Parent = MainFrame

local TitleStroke = Instance.new("UIStroke")
TitleStroke.Color = CurrentScheme.Primary
TitleStroke.Thickness = 3
TitleStroke.Parent = Title

-- Pulsating animation for title stroke
local function AnimateTitleStroke()
    local tweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
    local tween = TweenService:Create(TitleStroke, tweenInfo, {Thickness = 5, Transparency = 0})
    tween:Play()
end
AnimateTitleStroke()

-- Toggle Container
local ToggleContainer = Instance.new("Frame")
ToggleContainer.Name = "ToggleContainer"
ToggleContainer.Size = UDim2.new(1, -40, 0, 180)
ToggleContainer.Position = UDim2.new(0, 20, 0, 90)
ToggleContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
ToggleContainer.BorderSizePixel = 0
ToggleContainer.Parent = MainFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.CornerRadius = UDim.new(0, 12)
ToggleCorner.Parent = ToggleContainer

-- Toggle Button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Size = UDim2.new(0, 120, 0, 120)
ToggleButton.Position = UDim2.new(0.5, -60, 0.5, -60)
ToggleButton.BackgroundColor3 = Color3.fromRGB(231, 76, 60)
ToggleButton.BorderSizePixel = 0
ToggleButton.Text = "OFF"
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 24
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Parent = ToggleContainer

local ToggleCorner2 = Instance.new("UICorner")
ToggleCorner2.CornerRadius = UDim.new(1, 0)
ToggleCorner2.Parent = ToggleButton

local ToggleStroke = Instance.new("UIStroke")
ToggleStroke.Color = Color3.fromRGB(192, 57, 43)
ToggleStroke.Thickness = 3
ToggleStroke.Parent = ToggleButton

-- Edition Display
local EditionFrame = Instance.new("Frame")
EditionFrame.Name = "EditionFrame"
EditionFrame.Size = UDim2.new(1, -40, 0, 70)
EditionFrame.Position = UDim2.new(0, 20, 1, -90)
EditionFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
EditionFrame.BorderSizePixel = 0
EditionFrame.Parent = MainFrame

local EditionCorner = Instance.new("UICorner")
EditionCorner.CornerRadius = UDim.new(0, 12)
EditionCorner.Parent = EditionFrame

local EditionGradient = Instance.new("UIGradient")
EditionGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, CurrentScheme.Gradient1),
    ColorSequenceKeypoint.new(1, CurrentScheme.Gradient2)
}
EditionGradient.Rotation = 45
EditionGradient.Parent = EditionFrame

local EditionLabel = Instance.new("TextLabel")
EditionLabel.Name = "EditionLabel"
EditionLabel.Size = UDim2.new(1, -20, 1, -20)
EditionLabel.Position = UDim2.new(0, 10, 0, 10)
EditionLabel.BackgroundTransparency = 1
EditionLabel.Text = EditionText
EditionLabel.Font = Enum.Font.GothamBold
EditionLabel.TextSize = 20
EditionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
EditionLabel.Parent = EditionFrame

-- Make GUI draggable
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Notification System
local NotificationContainer = Instance.new("Frame")
NotificationContainer.Name = "NotificationContainer"
NotificationContainer.Size = UDim2.new(0, 350, 1, 0)
NotificationContainer.Position = UDim2.new(1, -370, 0, 20)
NotificationContainer.BackgroundTransparency = 1
NotificationContainer.Parent = ScreenGui

local NotificationLayout = Instance.new("UIListLayout")
NotificationLayout.SortOrder = Enum.SortOrder.LayoutOrder
NotificationLayout.Padding = UDim.new(0, 10)
NotificationLayout.Parent = NotificationContainer

local function CreateNotification(title, message, duration)
    local Notification = Instance.new("Frame")
    Notification.Size = UDim2.new(1, 0, 0, 0)
    Notification.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    Notification.BorderSizePixel = 0
    Notification.ClipsDescendants = true
    Notification.Parent = NotificationContainer
    
    local NotifCorner = Instance.new("UICorner")
    NotifCorner.CornerRadius = UDim.new(0, 10)
    NotifCorner.Parent = Notification
    
    local NotifStroke = Instance.new("UIStroke")
    NotifStroke.Color = CurrentScheme.Primary
    NotifStroke.Thickness = 2
    NotifStroke.Parent = Notification
    
    local NotifTitle = Instance.new("TextLabel")
    NotifTitle.Size = UDim2.new(1, -20, 0, 25)
    NotifTitle.Position = UDim2.new(0, 10, 0, 10)
    NotifTitle.BackgroundTransparency = 1
    NotifTitle.Text = title
    NotifTitle.Font = Enum.Font.GothamBold
    NotifTitle.TextSize = 16
    NotifTitle.TextColor3 = CurrentScheme.Primary
    NotifTitle.TextXAlignment = Enum.TextXAlignment.Left
    NotifTitle.Parent = Notification
    
    local NotifMessage = Instance.new("TextLabel")
    NotifMessage.Size = UDim2.new(1, -20, 0, 40)
    NotifMessage.Position = UDim2.new(0, 10, 0, 35)
    NotifMessage.BackgroundTransparency = 1
    NotifMessage.Text = message
    NotifMessage.Font = Enum.Font.Gotham
    NotifMessage.TextSize = 14
    NotifMessage.TextColor3 = Color3.fromRGB(200, 200, 200)
    NotifMessage.TextXAlignment = Enum.TextXAlignment.Left
    NotifMessage.TextWrapped = true
    NotifMessage.Parent = Notification
    
    local ProgressBar = Instance.new("Frame")
    ProgressBar.Size = UDim2.new(1, 0, 0, 3)
    ProgressBar.Position = UDim2.new(0, 0, 1, -3)
    ProgressBar.BackgroundColor3 = CurrentScheme.Primary
    ProgressBar.BorderSizePixel = 0
    ProgressBar.Parent = Notification
    
    -- Animate in
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 90)})
    tweenIn:Play()
    
    -- Progress bar animation
    local progressTween = TweenService:Create(ProgressBar, TweenInfo.new(duration, Enum.EasingStyle.Linear), {Size = UDim2.new(0, 0, 0, 3)})
    progressTween:Play()
    
    -- Animate out after duration
    task.wait(duration)
    local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), {Size = UDim2.new(1, 0, 0, 0)})
    tweenOut:Play()
    tweenOut.Completed:Wait()
    Notification:Destroy()
end

-- Server Hopper Function
local function ServerHop()
    if IsHopping then return end
    IsHopping = true
    
    CreateNotification("Server Hopper", "Searching for new server...", 3)
    
    local success, result = pcall(function()
        local servers = {}
        local placeId = game.PlaceId
        local jobId = game.JobId
        
        local cursor = ""
        repeat
            local url = string.format(
                "https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100&cursor=%s",
                placeId,
                cursor
            )
            
            local response = game:HttpGet(url)
            local data = HttpService:JSONDecode(response)
            
            for _, server in ipairs(data.data) do
                if server.id ~= jobId and server.playing < server.maxPlayers then
                    table.insert(servers, server.id)
                end
            end
            
            cursor = data.nextPageCursor or ""
        until cursor == ""
        
        if #servers > 0 then
            local randomServer = servers[math.random(1, #servers)]
            CreateNotification("Success!", "Teleporting to new server...", 2)
            task.wait(1)
            TeleportService:TeleportToPlaceInstance(placeId, randomServer, LocalPlayer)
        else
            CreateNotification("Error", "No available servers found", 3)
            IsHopping = false
        end
    end)
    
    if not success then
        CreateNotification("Error", "Failed to find servers: " .. tostring(result), 4)
        IsHopping = false
    end
end

-- Toggle Button Logic
ToggleButton.MouseButton1Click:Connect(function()
    JoinerEnabled = not JoinerEnabled
    
    if JoinerEnabled then
        -- Turn ON
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        TweenService:Create(ToggleButton, tweenInfo, {
            BackgroundColor3 = CurrentScheme.Primary
        }):Play()
        TweenService:Create(ToggleStroke, tweenInfo, {
            Color = CurrentScheme.Secondary
        }):Play()
        ToggleButton.Text = "ON"
        
        CreateNotification("Joiner Enabled", "Server hopping is now active", 3)
        
        -- Start server hopping loop
        task.spawn(function()
            while JoinerEnabled do
                ServerHop()
                task.wait(5) -- Wait 5 seconds before next hop
            end
        end)
    else
        -- Turn OFF
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        TweenService:Create(ToggleButton, tweenInfo, {
            BackgroundColor3 = Color3.fromRGB(231, 76, 60)
        }):Play()
        TweenService:Create(ToggleStroke, tweenInfo, {
            Color = Color3.fromRGB(192, 57, 43)
        }):Play()
        ToggleButton.Text = "OFF"
        
        CreateNotification("Joiner Disabled", "Server hopping stopped", 3)
    end
end)

-- Hover effects for toggle button
ToggleButton.MouseEnter:Connect(function()
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    TweenService:Create(ToggleButton, tweenInfo, {Size = UDim2.new(0, 130, 0, 130)}):Play()
end)

ToggleButton.MouseLeave:Connect(function()
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    TweenService:Create(ToggleButton, tweenInfo, {Size = UDim2.new(0, 120, 0, 120)}):Play()
end)

-- Entrance animation
MainFrame.Size = UDim2.new(0, 0, 0, 0)
MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)

local entranceTween = TweenService:Create(MainFrame, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
    Size = UDim2.new(0, 320, 0, 400),
    Position = UDim2.new(0.5, -160, 0.5, -200)
})
entranceTween:Play()

-- Welcome notification
task.wait(0.5)
CreateNotification("Welcome!", "Isme Joiner loaded successfully. Edition: " .. (IsPremium and "Premium" or "FreeMium"), 4)
